<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>Graescence Updates Feed</id>
    <title>Graescence Updates Feed</title>
    <updated>2023-01-10T15:27:25.688Z</updated>
    <generator>Feed npm package</generator>
    <author>
        <name>apoetsanon</name>
    </author>
    <link rel="self" href="http://localhost:3000/feeds/updates/atom.xml"/>
    <subtitle>RSS Feed of updates from the Graescence Webnovel</subtitle>
    <logo>http://localhost:3000/images/profile.png</logo>
    <icon>http://localhost:3000/favicon.ico</icon>
    <rights>All rights reserved 2023, apotesanon</rights>
    <entry>
        <title type="html"><![CDATA[When to Use Static Generation v.s. Server-side Rendering]]></title>
        <id>ssg-ssr</id>
        <link href="http://localhost:3000/updates/ssg-ssr"/>
        <updated>2020-01-02T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>We recommend using <strong>Static Generation</strong> (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.</p>
<p>You can use Static Generation for many types of pages, including:</p>
<ul>
<li>Marketing pages</li>
<li>Blog posts</li>
<li>E-commerce product listings</li>
<li>Help and documentation</li>
</ul>
<p>You should ask yourself: "Can I pre-render this page <strong>ahead</strong> of a user's request?" If the answer is yes, then you should choose Static Generation.</p>
<p>On the other hand, Static Generation is <strong>not</strong> a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data and the page content changes with every request.</p>
<p>In that case, you can use <strong>Server-Side Rendering</strong>. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.</p>
]]></summary>
        <author>
            <name>apoetsanon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Two Forms of Pre-rendering]]></title>
        <id>pre-rendering</id>
        <link href="http://localhost:3000/updates/pre-rendering"/>
        <updated>2020-01-01T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Next.js has two forms of pre-rendering: <strong>Static Generation</strong> and <strong>Server-side Rendering</strong>. The difference is in <strong>when</strong> it generates the HTML for a page.</p>
<ul>
<li><strong>Static Generation</strong> is the pre-rendering method that generates the HTML at <strong>build time</strong>. The pre-rendered HTML is then <em>reused</em> on each request.</li>
<li><strong>Server-side Rendering</strong> is the pre-rendering method that generates the HTML on <strong>each request</strong>.</li>
</ul>
<p>Importantly, Next.js lets you <strong>choose</strong> which pre-rendering form to use for each page. You can create a "hybrid" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.</p>
]]></summary>
        <author>
            <name>apoetsanon</name>
        </author>
    </entry>
</feed>